global Op {
  const ADD   = 6h00;
  const SUB   = 6h01;
  const MUL   = 6h02;
  const MULH  = 6h04;
  const NOR   = 6h11;
  const NOTB  = 6h13;
  const NOTA  = 6h15;
  const XOR   = 6h16;
  const NAND  = 6h17;
  const AND   = 6h18;
  const XNOR  = 6h19;
  const A     = 6h1A;
  const B     = 6h1C;
  const OR    = 6h1E;
  const SHL   = 6h20;
  const SHR   = 6h21;
  const SLA   = 6h22;
  const SRA   = 6h23;
  const CMPEQ = 6h33;
  const CMPLT = 6h35;
  const CMPLE = 6h37;
  const CMPGT = 6h3d;
  const CMPGE = 6h3f;
}

module alu8 (
    input op [6],
    input a [8],
    input b [8],
    output z,
    output v,
    output n,
    output c [8]
  ) {
  
  .op(op[3:0]) {
    .a(a), .b(b) {
      alu_addr8 adder;
      alu_shift8 shifter;
    }
    alu_bitw bitwise [8];
    alu_cmp_zvn comp (.z(adder.z), .v(adder.v), .n(adder.n));
  }
  
  sig result [4][8];
  
  always {
    // defined separately due to port size
    bitwise.a = a;
    bitwise.b = b;
    
    result = {comp.c, shifter.c, bitwise.c, adder.c};
    
    // choose output based on msbs of opcode
    c = result[op[5:4]];
    
    // connect z, v, n from adder
    z = adder.z;
    v = adder.v;
    n = adder.n;
  }
}
