module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output audio [2],       // audio
    inout sda,              // i2c data
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  const BUTTONS = 16;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      i2c_mini i2c (.sda(sda));
      game game (#BUTTONS(BUTTONS), .toffset(io_dip[2][7:4]));
      lightgrid grid (#LIGHTS(BUTTONS));
      counter seg_sel (#SIZE(2), #DIV(18));
      led_alnum alnum (.ack(i2c.ack_write), .busy(i2c.busy));
      .notetype(io_dip[2][3:0]) { sound chan_l; sound chan_r; }
    }
    bin_to_dec ctr (#DIGITS(6), .value(game.ts));
    //bin_to_dec combo (#DIGITS(3));
  }
  
  fourteenseg chars [16] (.dot(0));
  sevenseg timestep [4];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    audio = 0;
    i2c.cmd = 0;
    i2c.data_in = 8x{bz};
    
    // game input
    game.butts = c{io_dip[1],io_dip[0]};
    
    // game output
    grid.vals = game.display;
    //combo.value = game.combo;
    alnum.segments = game.alnum;
    chan_l.notes = game.audio[1:0];
    chan_r.notes = game.audio[3:2];
    
    // hardware modules
    timestep.dot = 4h2;
    timestep.char = ctr.digits[5:2];
    chars.num = 16x{{4hf}};
    chars.char = 16x{{8h0}};

    i2c.cmd = alnum.cmd;
    i2c.data_in = alnum.data;
    
    
    case ( game.state ) {
      3:
        //chars.num[2:0] = combo.digits;
        //chars.char[7:3] = $reverse("Cmbo:");
        alnum.segments[7:0] = chars.segs[7:0];
    }

    // output    
    led[3:0] = 4h1<<grid.bsel;
    io_led[0] = c{grid.pulse[1], grid.pulse[0]};
    io_led[1][3:0] = grid.pulse[2];
    //io_led[2] = game.debug;
    io_led[2][4] = 1;
    io_led[2][6] = i2c.scl;
    io_sel = ~(4h1<<seg_sel.value);
    io_seg = ~timestep.segs[seg_sel.value];
    audio = c{chan_l.pulse, chan_r.pulse};
  }
}
